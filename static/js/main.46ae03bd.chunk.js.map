{"version":3,"sources":["Funds.js","Fund.js","App.js","serviceWorker.js","index.js"],"names":["Funds","useState","isLoading","changeLoading","fundsData","changeFundsData","funds","changeFunds","history","useHistory","fundCatLookup","changeFundCatLookup","fundTypeLookup","changeFundTypeLookup","fundPlanLookup","changeFundPlanLookup","useEffect","a","axios","get","res","data","getFunds","forEach","fund","push","name","category","fund_category","type","fund_type","plan","year_1_return","returns","year_1","year_3_return","year_3","code","fund_cat","fund_plan","includes","fund_type_obj","fund_cat_obj","cat","fund_plan_obj","title","columns","field","lookup","customSort","b","parseFloat","filtering","options","sorting","pageSize","pageSizeOptions","headerStyle","position","top","maxBodyHeight","components","Pagination","props","TablePagination","className","onRowClick","event","rowData","Fund","fundCode","useParams","changeFund","getFundFromCode","console","log","CircularProgress","TableContainer","component","Paper","Table","size","aria-label","TableBody","Object","keys","map","key","TableRow","TableCell","scope","Array","isArray","toString","innerKey","el","align","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46ae03bd.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport {useHistory} from 'react-router-dom';\n\nfunction Funds() {\n  const [isLoading, changeLoading] = useState(false);\n  const [fundsData, changeFundsData] = useState([]);\n  const [funds, changeFunds] = useState([]);\n  const history = useHistory();\n\n  const [fundCatLookup, changeFundCatLookup] = useState({});\n  const [fundTypeLookup, changeFundTypeLookup] = useState({});\n  const [fundPlanLookup, changeFundPlanLookup] = useState({});\n\n  useEffect(() => {\n    changeLoading(true);\n    const getFunds = async () => {\n      const res = await axios.get('https://api.kuvera.in/api/v3/funds.json');\n      changeFunds(res.data);\n      changeLoading(false);\n    };\n    getFunds()\n  }, []);\n\n  useEffect(() => {\n    const data = [];\n    funds.forEach(fund => {\n      data.push({\n        name: fund.name,\n        category: fund.fund_category,\n        type: fund.fund_type,\n        plan: fund.plan,\n        year_1_return: fund.returns.year_1,\n        year_3_return: fund.returns.year_3,\n        code: fund.code,\n      })\n    });\n    changeFundsData(data);\n\n    let fund_cat = [];\n    let fund_type = [];\n    let fund_plan = [];\n    for (let fund of funds){\n      if (!fund_cat.includes(fund.fund_category)) fund_cat.push(fund.fund_category);\n      if (!fund_type.includes(fund.fund_type)) fund_type.push(fund.fund_type);\n      if (!fund_plan.includes(fund.plan)) fund_plan.push(fund.plan);\n    }\n\n    let fund_type_obj = {};\n    for (let type of fund_type) {\n      if (type) fund_type_obj[type] = type;\n    }\n\n    let fund_cat_obj = {};\n    for (let cat of fund_cat) {\n      if (cat) fund_cat_obj[cat] = cat;\n    }\n\n    let fund_plan_obj = {};\n    for (let plan of fund_plan) {\n      if (plan) fund_plan_obj[plan] = plan;\n    }\n\n    changeFundCatLookup(fund_cat_obj);\n    changeFundPlanLookup(fund_plan_obj);\n    changeFundTypeLookup(fund_type_obj);\n  }, [funds]);\n\n\n\n  return (\n    <MaterialTable\n      isLoading={isLoading}\n      title=\"Kuvara stocks dashboard\"\n      columns={[\n        { title: 'Name', field: 'name' },\n        {\n          title: 'Category',\n          field: 'category',\n          lookup: fundCatLookup\n\n        },\n        {\n          title: 'Type',\n          field: 'type',\n          lookup: fundTypeLookup,\n        },\n        {\n          title: 'Plan',\n          field: 'plan',\n          lookup: fundPlanLookup\n        },\n        { title: 'Year 1 return', field: 'year_1_return', customSort: (a, b) => parseFloat(a.year_1_return) - parseFloat(b.year_3_return), filtering: false},\n        { title: 'Year 3 return', field: 'year_3_return', customSort: (a, b) => parseFloat(a.year_3_return) - parseFloat(b.year_3_return), filtering: false},\n      ]}\n      data={fundsData}\n      options={{\n        sorting: true,\n        pageSize: 100,\n        pageSizeOptions: [50, 100, 200, 1000],\n        headerStyle: { position: 'sticky', top: 0 },\n        maxBodyHeight: '85vh',\n        filtering: true\n      }}\n      components={{\n        Pagination: props => (\n          <TablePagination\n            {...props}\n            className='table_footer'\n          />\n        ),\n      }}\n      onRowClick={\n        (event, rowData) => {\n          history.push(`/explore/${rowData.code}`)\n        }\n      }\n    />\n  )\n}\n\nexport default Funds;\n","import React, {useEffect, useState} from \"react\";\nimport {useParams} from 'react-router-dom';\nimport axios from 'axios';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './Fund.css';\n\nfunction Fund() {\n  const {fundCode} = useParams();\n  const [fund, changeFund] = useState({});\n  const [isLoading, changeLoading] = useState();\n  useEffect(() => {\n    changeLoading(true);\n    const getFundFromCode = async () => {\n      const res = await axios.get(`https://api.kuvera.in/api/v3/funds/${fundCode}.json`);\n      changeFund(res.data[0]);\n      changeLoading(false);\n    };\n    getFundFromCode()\n  }, [fundCode]);\n\n  console.log(fund);\n  return (\n    <div className='fund-parent'>\n      {isLoading ?\n        <CircularProgress />:\n        <TableContainer component={Paper}>\n            <h3>{fund.name}</h3>\n            <Table size='small' aria-label=\"a dense table\">\n              <TableBody>\n                {fund && Object.keys(fund).map((key) => (\n                  <>\n                    <TableRow key={key}>\n                      <TableCell size='small' component=\"th\" scope=\"row\">\n                        <b>{key}</b>\n                      </TableCell>\n                      {(typeof fund[key] !== 'object' || (Array.isArray(fund[key]) && typeof fund[key][0] !== 'object')) &&\n                      (\n                        <TableCell size='small'>{fund[key].toString()}</TableCell>\n                      )\n                      }\n                    </TableRow>\n                    {typeof fund[key] === 'object' && !Array.isArray(fund[key]) && (\n                      <>\n                        {fund[key] && Object.keys(fund[key]).map(innerKey => (\n                          <TableRow>\n                            <TableCell size='small' />\n                            <TableCell size='small'>{innerKey.toString()}</TableCell>\n                            <TableCell className='small_column' size='small'>{fund[key][innerKey].toString()}</TableCell>\n                          </TableRow>\n                        ))}\n                      </>\n                    )}\n                    { Array.isArray(fund[key]) && (typeof fund[key][0] === 'object') && (\n                      fund[key].map(el => (\n                        <TableRow>\n                          <TableCell className='small_column' size='small' />\n                          {\n                            el && Object.keys(el).map(innerKey => (\n                              <TableRow>\n                                <TableCell size='small' />\n                                <TableCell size='small'>{innerKey.toString()}</TableCell>\n                                <TableCell size='small' align='left'>{el[innerKey].toString()}</TableCell>\n                              </TableRow>\n                            ))\n                          }\n                        </TableRow>\n                      ))\n                    )}\n                  </>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n      }\n    </div>\n  )\n}\n\nexport default Fund;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport Funds from \"./Funds\";\nimport Fund from \"./Fund\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Funds />\n          </Route>\n          <Route exact path=\"/explore\">\n            <Funds />\n          </Route>\n          <Route path=\"/explore/:fundCode\">\n            <Fund/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}